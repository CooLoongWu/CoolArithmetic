package com.zxxxy.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxxxy.coolarithmetic.entity.WrongQuestion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "WRONG_QUESTION".
 */
public class WrongQuestionDao extends AbstractDao<WrongQuestion, Long> {

    public static final String TABLENAME = "WRONG_QUESTION";

    /**
     * Properties of entity WrongQuestion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Grade = new Property(1, int.class, "grade", false, "GRADE");
        public final static Property Advance = new Property(2, int.class, "advance", false, "ADVANCE");
        public final static Property QuestionId = new Property(3, int.class, "questionId", false, "QUESTION_ID");
        public final static Property Question = new Property(4, String.class, "question", false, "QUESTION");
        public final static Property QuestionType = new Property(5, String.class, "questionType", false, "QUESTION_TYPE");
        public final static Property AnswerA = new Property(6, String.class, "answerA", false, "ANSWER_A");
        public final static Property AnswerB = new Property(7, String.class, "answerB", false, "ANSWER_B");
        public final static Property AnswerC = new Property(8, String.class, "answerC", false, "ANSWER_C");
        public final static Property AnswerD = new Property(9, String.class, "answerD", false, "ANSWER_D");
        public final static Property Answer = new Property(10, int.class, "answer", false, "ANSWER");
        public final static Property Explanation = new Property(11, String.class, "explanation", false, "EXPLANATION");
        public final static Property SelectedAnswer = new Property(12, String.class, "selectedAnswer", false, "SELECTED_ANSWER");
    }


    public WrongQuestionDao(DaoConfig config) {
        super(config);
    }

    public WrongQuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"WRONG_QUESTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GRADE\" INTEGER NOT NULL ," + // 1: grade
                "\"ADVANCE\" INTEGER NOT NULL ," + // 2: advance
                "\"QUESTION_ID\" INTEGER NOT NULL ," + // 3: questionId
                "\"QUESTION\" TEXT," + // 4: question
                "\"QUESTION_TYPE\" TEXT," + // 5: questionType
                "\"ANSWER_A\" TEXT," + // 6: answerA
                "\"ANSWER_B\" TEXT," + // 7: answerB
                "\"ANSWER_C\" TEXT," + // 8: answerC
                "\"ANSWER_D\" TEXT," + // 9: answerD
                "\"ANSWER\" INTEGER NOT NULL ," + // 10: answer
                "\"EXPLANATION\" TEXT," + // 11: explanation
                "\"SELECTED_ANSWER\" TEXT);"); // 12: selectedAnswer
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WRONG_QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WrongQuestion entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGrade());
        stmt.bindLong(3, entity.getAdvance());
        stmt.bindLong(4, entity.getQuestionId());

        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(5, question);
        }

        String questionType = entity.getQuestionType();
        if (questionType != null) {
            stmt.bindString(6, questionType);
        }

        String answerA = entity.getAnswerA();
        if (answerA != null) {
            stmt.bindString(7, answerA);
        }

        String answerB = entity.getAnswerB();
        if (answerB != null) {
            stmt.bindString(8, answerB);
        }

        String answerC = entity.getAnswerC();
        if (answerC != null) {
            stmt.bindString(9, answerC);
        }

        String answerD = entity.getAnswerD();
        if (answerD != null) {
            stmt.bindString(10, answerD);
        }
        stmt.bindLong(11, entity.getAnswer());

        String explanation = entity.getExplanation();
        if (explanation != null) {
            stmt.bindString(12, explanation);
        }

        String selectedAnswer = entity.getSelectedAnswer();
        if (selectedAnswer != null) {
            stmt.bindString(13, selectedAnswer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WrongQuestion entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGrade());
        stmt.bindLong(3, entity.getAdvance());
        stmt.bindLong(4, entity.getQuestionId());

        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(5, question);
        }

        String questionType = entity.getQuestionType();
        if (questionType != null) {
            stmt.bindString(6, questionType);
        }

        String answerA = entity.getAnswerA();
        if (answerA != null) {
            stmt.bindString(7, answerA);
        }

        String answerB = entity.getAnswerB();
        if (answerB != null) {
            stmt.bindString(8, answerB);
        }

        String answerC = entity.getAnswerC();
        if (answerC != null) {
            stmt.bindString(9, answerC);
        }

        String answerD = entity.getAnswerD();
        if (answerD != null) {
            stmt.bindString(10, answerD);
        }
        stmt.bindLong(11, entity.getAnswer());

        String explanation = entity.getExplanation();
        if (explanation != null) {
            stmt.bindString(12, explanation);
        }

        String selectedAnswer = entity.getSelectedAnswer();
        if (selectedAnswer != null) {
            stmt.bindString(13, selectedAnswer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public WrongQuestion readEntity(Cursor cursor, int offset) {
        WrongQuestion entity = new WrongQuestion( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getInt(offset + 1), // grade
                cursor.getInt(offset + 2), // advance
                cursor.getInt(offset + 3), // questionId
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // question
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // questionType
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answerA
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // answerB
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // answerC
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // answerD
                cursor.getInt(offset + 10), // answer
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // explanation
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // selectedAnswer
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, WrongQuestion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGrade(cursor.getInt(offset + 1));
        entity.setAdvance(cursor.getInt(offset + 2));
        entity.setQuestionId(cursor.getInt(offset + 3));
        entity.setQuestion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuestionType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswerA(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAnswerB(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAnswerC(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAnswerD(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAnswer(cursor.getInt(offset + 10));
        entity.setExplanation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSelectedAnswer(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
    }

    @Override
    protected final Long updateKeyAfterInsert(WrongQuestion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(WrongQuestion entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WrongQuestion entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
